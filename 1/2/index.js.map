{"version":3,"file":"index.js","mappings":"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","sources":["webpack://cph5sdk/./src/type/public.ts","webpack://cph5sdk/./src/utils/tools.ts","webpack://cph5sdk/./src/utils/getUrlParams.ts","webpack://cph5sdk/./src/utils/log.ts","webpack://cph5sdk/./src/type/code.ts","webpack://cph5sdk/./src/utils/errorHandler.ts","webpack://cph5sdk/./src/work/android.ts","webpack://cph5sdk/./src/devices/android.ts","webpack://cph5sdk/./src/index.ts","webpack://cph5sdk/./src/launch/launch.ts"],"sourcesContent":["export var ENV;\n(function (ENV) {\n    ENV[\"dev\"] = \"dev\";\n    ENV[\"uat\"] = \"uat\";\n    ENV[\"master\"] = \"master\";\n})(ENV || (ENV = {}));\n","/** 解析get类型数据 */\nexport const analysisGet = (parsedData) => {\n    let jsonData = {};\n    //乾坤大挪移\n    parsedData.split('&').map((res) => {\n        let data = res.split('=');\n        jsonData[data[0]] = data[1];\n    });\n    return jsonData;\n};\n/** 获取当前微秒 */\nexport function getNowMicroseconds() {\n    var start = performance.timing ?\n        performance.timing.navigationStart :\n        performance.timeOrigin;\n    return (performance.now() + start) * 1000;\n}\n/** 加载script */\nexport function loadScript(url, callback, errorBack, type) {\n    if (document.body) {\n        let script = document.createElement('script');\n        script.src = url;\n        script.onload = callback;\n        script.onerror = errorBack;\n        type && (script.type = type);\n        document.body.append(script);\n    }\n    else {\n        document.write(`<script src=\"${url}\" onload=\"${callback()}\"><\\/script>`);\n    }\n}\n/** 拼接get */\nexport function joinGetParams(params) {\n    let data = '';\n    for (let i in params) {\n        data += `${i}=${params[i]}&`;\n    }\n    return data.slice(0, data.length - 1);\n}\n/** 补零 */\nexport function zeroFill(number, digit) {\n    if ((number + '').length >= digit)\n        return number + '';\n    return (new Array(digit + 1 - (number + '').length)).join('0') + number;\n}\n/** 获取时区 */\nexport function getUTC() {\n    return '+' + zeroFill((0 - new Date().getTimezoneOffset() / 60), 2) + '00';\n}\n/** 获取时间格式 */\nexport function getDateFormat(time, format = 'year-month-day hour:min:sec') {\n    let date;\n    //判断格式\n    if (typeof time != 'object') {\n        date = new Date(time);\n    }\n    else {\n        date = time;\n    }\n    const year = date.getFullYear() + '';\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const min = date.getMinutes();\n    const sec = date.getSeconds();\n    return format.replace('year', year)\n        .replace('month', zeroFill(month, 2) + '')\n        .replace('day', zeroFill(day, 2) + '')\n        .replace('hour', zeroFill(hour, 2) + '')\n        .replace('min', zeroFill(min, 2) + '')\n        .replace('sec', zeroFill(sec, 2) + '');\n}\nexport function getOsVersion() {\n    var u = navigator.userAgent, version = '';\n    if (u.indexOf('Mac OS X') > -1) {\n        // ios\n        var regStr_saf = /OS [\\d._]*/gi;\n        var verinfo = u.match(regStr_saf);\n        version = 'IOS ' + (verinfo + '').replace(/[^0-9|_.]/ig, '').replace(/_/ig, '.');\n    }\n    else if (u.indexOf('Android') > -1 ||\n        u.indexOf('Linux') > -1) {\n        // android\n        version = 'Android ' + u.substr(u.indexOf('Android') + 8, u.indexOf(';', u.indexOf('Android')) - u.indexOf('Android') - 8);\n    }\n    else if (u.indexOf('BB10') > -1) {\n        // 黑莓bb10系统\n        version = 'blackberry ' + u.substr(u.indexOf('BB10') + 5, u.indexOf(';', u.indexOf('BB10')) - u.indexOf('BB10') - 5);\n    }\n    else if (u.indexOf('IEMobile') > -1) {\n        // windows phone\n        version = 'winphone ' + u.substr(u.indexOf('IEMobile') + 9, u.indexOf(';', u.indexOf('IEMobile')) - u.indexOf('IEMobile') - 9);\n    }\n    else {\n        var userAgent = navigator.userAgent.toLowerCase();\n        if (userAgent.indexOf('windows nt 5.0') > -1) {\n            version = 'Windows 2000';\n        }\n        else if (userAgent.indexOf('windows nt 5.1') > -1 || userAgent.indexOf('windows nt 5.2') > -1) {\n            version = 'Windows XP';\n        }\n        else if (userAgent.indexOf('windows nt 6.0') > -1) {\n            version = 'Windows Vista';\n        }\n        else if (userAgent.indexOf('windows nt 6.1') > -1 || userAgent.indexOf('windows 7') > -1) {\n            version = 'Windows 7';\n        }\n        else if (userAgent.indexOf('windows nt 6.2') > -1 || userAgent.indexOf('windows 8') > -1) {\n            version = 'Windows 8';\n        }\n        else if (userAgent.indexOf('windows nt 6.3') > -1) {\n            version = 'Windows 8.1';\n        }\n        else if (userAgent.indexOf('windows nt 6.2') > -1 || userAgent.indexOf('windows nt 10.0') > -1) {\n            version = 'Windows 10';\n        }\n        else {\n            version = 'Unknown';\n        }\n    }\n    return version.toLocaleLowerCase();\n}\n//记录客户端激活参数\nexport function getAction() {\n    let first_active = localStorage.getItem('cp_unFirstActive') ? 0 : 1;\n    localStorage.setItem('cp_unFirstActive', '1');\n    return first_active + '';\n}\n","import { analysisGet } from '@/utils/tools';\n/** url地址参数处理 */\nexport class GetUrlParams {\n    constructor() {\n        this.urlParams = this.analysis();\n    }\n    static getInstance() {\n        return this.instance;\n    }\n    analysis() {\n        let urlData = location.search.slice(1, location.search.length);\n        return analysisGet(urlData);\n    }\n    /** 获取单数据 */\n    get(key) {\n        let params = this.urlParams[key];\n        return params;\n    }\n    /** 获取所有数据 */\n    getAll() {\n        return this.urlParams;\n    }\n    /** 是否为android */\n    getIsAndroid() {\n        return Boolean(GetUrlParams.getInstance().get('android'));\n    }\n    /** 是否为ios */\n    getIsIos() {\n        return Boolean(GetUrlParams.getInstance().get('ios'));\n    }\n    /** 是否为app */\n    getIsApp() {\n        return Boolean(GetUrlParams.getInstance().get('isApp'));\n    }\n    /** 获取发行商code */\n    getPubisherId() {\n        //TODO \n        return GetUrlParams.getInstance().get('pubId');\n    }\n    /** 获取发行商code */\n    getPubisherCode() {\n        //TODO \n        return GetUrlParams.getInstance().get('pubCode');\n    }\n    /** gameid */\n    getGameId() {\n        //TODO \n        return GetUrlParams.getInstance().get('gameId');\n    }\n    /** zoneId */\n    getZoneId() {\n        //TODO\n        return GetUrlParams.getInstance().get('zoneId');\n    }\n    /** tunnelId */\n    getTunnelId() {\n        //TODO \n        return GetUrlParams.getInstance().get('tunnelId');\n    }\n}\nGetUrlParams.instance = new GetUrlParams();\n","import { ENV } from \"@/type/public\";\nimport { GetUrlParams } from \"./getUrlParams\";\nimport { getNowMicroseconds } from \"./tools\";\nexport class Log {\n    /**\n     * 普通日志\n     * 打包抹除\n     */\n    static common(...args) {\n        if (process.env.SDK_env != ENV.master)\n            console.log('[cpsdk][debugger log]:', ...args);\n    }\n    /**\n     * s级系统日志\n     * 打包后不丢失\n     * */\n    static commonS(...args) {\n        if (process.env.SDK_env != ENV.master) {\n            console.log('[cpsdk][info]:', ...args);\n        }\n        else {\n            (GetUrlParams.getInstance().get('logDebug') == 'debug') && console.log('[cpsdk][info]:', ...args);\n        }\n    }\n    /**\n     * 错误日志\n     * 打包时不再输入改为上报\n     * */\n    static error(...args) {\n        //TODO 策略上报\n        if (process.env.SDK_env != ENV.master)\n            console.error('[cpsdk][error]:', ...args);\n    }\n    /**\n     * 警告日志\n     * 打包抹除\n     * */\n    static warn(...args) {\n        if (process.env.SDK_env != ENV.master)\n            console.warn('[cpsdk][warnning]:', ...args);\n    }\n    /**\n     * 封装时间差开始组件\n     * 打包抹除\n     * */\n    static timeStart(logName) {\n        if (process.env.SDK_env != ENV.master) {\n            if (this.logTimeState.hasOwnProperty(logName))\n                this.error(`logName ${logName} is exist`);\n            this.logTimeState[logName] = getNowMicroseconds();\n            console.log(`[cpsdk][timer]:start ${logName}`);\n            return logName;\n        }\n    }\n    /**\n     * 封装时间差结束组件\n     * 打包抹除\n     *  */\n    static timeEnd(logName) {\n        if (process.env.SDK_env != ENV.master) {\n            if (!this.logTimeState.hasOwnProperty(logName))\n                this.error(`logName ${logName} is not exist`);\n            const logTime = getNowMicroseconds() - this.logTimeState[logName];\n            console.log(`[cpsdk][timer]:end ${logName} --${logTime}μs`);\n            return logTime;\n        }\n    }\n}\nLog.logTimeState = {};\n","//6+ 内部错误\n//7+ 业务错误\n//71+ 初始化\n//72+ 登录\n//73+ 支付\n//74+ 数据上报\n//75+ 登出\n//76+ 切换账号\n//77+ 隐私协议\n//78+ 悬浮球\n//79+ 实名\n//70+ 其他周边功能（分享/微端）\n//99999 未知错误\n//cp错误码\nexport const CP_CODE = {\n    /**成功 */\n    SUCCESS: { code: 200, msg: \"成功\" },\n    /**网络未知错误 */\n    NETERROR: { code: 9001, msg: \"网络未知错误\" },\n    /**发行方方法未实现 */\n    FUNCTION_IS_NOT_ACHIEVE_BY_PUB: { code: 9002, msg: \"发行方方法未实现\" },\n    /**CP WORK方法未实现 */\n    FUNCTION_IS_NOT_ACHIEVE_BY_CP_WORK: { code: 9003, msg: \"CP WORK方法未实现\" },\n    /**内部初始化失败 */\n    INSIDE_INIT_ERROR: { code: 60100, msg: \"内部初始化失败\" },\n    /**内部ios实现初始化失败 */\n    INSIDE_IOS_INIT_ERROR: { code: 60110, msg: \"内部ios实现初始化失败\" },\n    /**内部android实现初始化失败 */\n    INSIDE_ANDROID_INIT_ERROR: { code: 60120, msg: \"内部android实现初始化失败\" },\n    /**内部h5实现初始化失败 */\n    INSIDE_H5_INIT_ERROR: { code: 60130, msg: '内部h5实现初始化失败' },\n    /**内部h5实现初始化加载发行资源失败 */\n    INSIDE_H5_INIT_PUB_RES_LOAD_FAIL: { code: 60131, msg: '内部h5实现初始化加载发行资源失败' },\n    /**内部h5实现初始化加载发行SDK资源失败 */\n    INSIDE_H5_INIT_PUB_SDK_RES_LOAD_FAIL: { code: 60132, msg: '内部h5实现初始化加载发行SDK资源失败' },\n    /**内部h5实现初始化加载发行实现资源失败 */\n    INSIDE_H5_INIT_PUB_ACHIEVE_RES_LOAD_FAIL: { code: 60133, msg: '内部h5实现初始化加载发行实现资源失败' },\n    /**android壳初始化失败 */\n    ANDROID_SHELL_INIT_ERROR: { code: 70121, msg: 'android壳初始化失败' },\n    /**android壳初始化数据解析失败 */\n    ANDROID_SHELL_INIT_DATA_PARSER_ERROR: { code: 70122, msg: 'android壳初始化数据解析失败' },\n    /**android壳登录失败*/\n    ANDROID_SHELL_LOGIN_ERROR: { code: 70221, msg: 'android壳登录失败' },\n    /**android壳登录数据解析失败 */\n    ANDROID_SHELL_LOGIN_DATA_PARSER_ERROR: { code: 70221, msg: 'android壳登录数据解析失败' },\n    /**h5work发行初始化失败 */\n    H5_WORK_PUB_INIT_ERROR: { code: 70131, msg: 'h5work发行初始化失败' },\n    /**h5work发行登录失败*/\n    H5_WORK_PUB_LOGIN_ERROR: { code: 70231, msg: 'h5work发行登录失败' },\n    /**h5work内部登录错误*/\n    H5_WORK_LOGIN_ERROR: { code: 70232, msg: 'h5work登录失败' },\n};\n","import { CP_CODE } from \"@/type/code\";\nimport { Log } from \"./log\";\nexport function errorHandlerCP(status, ...msg) {\n    if (status.code == CP_CODE.SUCCESS.code) {\n        msg.length > 0 && Log.commonS('[cp work]', ...msg);\n    }\n    else {\n        //输出错误工作状态\n        Log.error(status.msg, '[cp work][code:]' + status.code, ...msg);\n    }\n    //返回工作状态\n    return Object.assign({}, status);\n}\nexport function warnHandlerCP(status, ...msg) {\n    Log.warn(status.msg, '[cp work][code:]' + status.code, ...msg);\n}\n","import { Log } from \"@/utils/log\";\nimport { CP_CODE } from \"@/type/code\";\nimport { errorHandlerCP } from \"@/utils/errorHandler\";\nvar appCode;\n(function (appCode) {\n    appCode[\"INIT\"] = \"init\";\n    appCode[\"LOGIN\"] = \"login\";\n    appCode[\"SWITCH_LOGIN\"] = \"switchLogin\";\n    appCode[\"LOGOUT\"] = \"logout\";\n    appCode[\"SUBMIT_GAME_DATA\"] = \"submitGameData\";\n    appCode[\"GET_DEVICE_INFO\"] = \"getDeviceInfo\";\n    appCode[\"PAY\"] = \"pay\";\n    appCode[\"OPEN_ACCOUNT_CENTER\"] = \"accountCenter\";\n    appCode[\"COPY_TEXT\"] = \"copyText\";\n    appCode[\"BIND_IDCARD\"] = \"bindIDCard\";\n    appCode[\"BIND_MOBILE\"] = \"bindMobile\";\n    appCode[\"BIND_ACCOUNT\"] = \"bindAccount\";\n    appCode[\"SHARE_SHOW_BLOCK\"] = \"shareShowBlock\";\n    appCode[\"SWITCH_CONFIG\"] = \"getSwitchConfig\";\n    appCode[\"LOGOUT_LISTENER\"] = \"logoutListener\";\n})(appCode || (appCode = {}));\nexport class Work {\n    constructor() {\n        this.store = {};\n        /** 初始化流程 */\n        this.initCall = null;\n        /** 登录 */\n        this.loginCall = null;\n        /** 获取设备信息 */\n        this.getDeviceCall = null;\n        //暴露对android方法\n        window.callH5 = {\n            initBack: this.initBack.bind(this),\n            loginBack: this.loginBack.bind(this),\n            getDeviceEnvBack: this.getDeviceEnvBack.bind(this),\n            switchAccountBack: this.switchAccountBack.bind(this),\n            logoutBack: this.logoutBack.bind(this)\n        };\n    }\n    /**android通讯 */\n    callApp(_fn, ...arg) {\n        var ss = \"window.lashell.\" + _fn + \"(\";\n        if (arg) {\n            arg.map((item) => {\n                ss += \"'\";\n                ss += item;\n                ss += \"',\";\n            });\n        }\n        ss += \")\";\n        Log.commonS('[call app->]', ss);\n        (new Function('return ' + ss))();\n    }\n    insideInit(resolve, reject) {\n        resolve({\n            cpSpace: this.getSpaceFunction()\n        });\n    }\n    init(params) {\n        Log.commonS('android壳初始化开始');\n        const { callback } = params;\n        this.initCall = callback;\n        //app出丝滑\n        this.callApp(appCode.INIT, JSON.stringify({\n            callName: 'callH5.initBack'\n        }));\n    }\n    ;\n    initBack(e) {\n        Log.commonS('android壳初始化完成', e);\n        try {\n            e = JSON.parse(e);\n            if (e === null || e === void 0 ? void 0 : e.isSuc) {\n                const { zoneid, tunnelid, gameid, pubid } = e;\n                this.store.zoneId = zoneid;\n                this.store.tunnelId = tunnelid;\n                this.store.gameId = gameid;\n                this.store.pubId = pubid;\n                Log.commonS('android壳初始化成功');\n                this.initCall && this.initCall(Object.assign({}, errorHandlerCP(CP_CODE.SUCCESS)));\n                this.initCall = null;\n            }\n            else {\n                errorHandlerCP(CP_CODE.ANDROID_SHELL_INIT_ERROR);\n                this.callApp(appCode.INIT, JSON.stringify({\n                    callName: 'callH5.initBack'\n                }));\n            }\n        }\n        catch (e) {\n            this.initCall && this.initCall(Object.assign({}, errorHandlerCP(CP_CODE.ANDROID_SHELL_INIT_DATA_PARSER_ERROR)));\n        }\n    }\n    login(params) {\n        Log.commonS('android壳登录开始');\n        const { callback } = params;\n        this.loginCall = callback;\n        this.callApp(appCode.LOGIN, JSON.stringify({\n            callName: 'callH5.loginBack'\n        }));\n    }\n    loginBack(e) {\n        Log.commonS('android壳登录完成', e);\n        try {\n            e = JSON.parse(e);\n            if (e === null || e === void 0 ? void 0 : e.isSuc) {\n                Log.commonS('android壳登录成功');\n                this.loginCall && this.loginCall(Object.assign(Object.assign({}, errorHandlerCP(CP_CODE.SUCCESS)), { data: {\n                        cpsdkToken: e.token,\n                        tunnelId: this.store.tunnelId - 0,\n                        zoneId: this.store.zoneId - 0,\n                        gameId: this.store.gameId - 0,\n                        pubId: this.store.pubId - 0,\n                    } }));\n            }\n            else {\n                this.loginCall && this.loginCall(Object.assign({}, errorHandlerCP(CP_CODE.ANDROID_SHELL_LOGIN_ERROR)));\n            }\n        }\n        catch (e) {\n            errorHandlerCP(CP_CODE.ANDROID_SHELL_LOGIN_DATA_PARSER_ERROR);\n            this.loginCall && this.loginCall(Object.assign({}, errorHandlerCP(CP_CODE.ANDROID_SHELL_LOGIN_DATA_PARSER_ERROR)));\n        }\n    }\n    onEventLog({ eventCode, eventData }) {\n        Log.commonS('android壳数据上报开始', eventCode, eventData);\n        this.callApp(appCode.SUBMIT_GAME_DATA, eventCode, JSON.stringify(eventData));\n    }\n    /** 支付 */\n    pay(params) {\n        Log.commonS('android壳支付开始', params);\n        this.callApp(appCode.PAY, JSON.stringify({\n            data: {\n                productId: params.product_id,\n                productName: params.product_name,\n                productDesc: params.product_desc || '',\n                price: params.order_amount,\n                productPrice: params.order_amount,\n                orderID: params.cpsdk_order_id,\n                serverID: params.server_id,\n                serverName: params.server_name,\n                roleID: params.role_id,\n                roleName: params.role_name,\n                extension: params.extension,\n                buyNum: params.product_num,\n                roleLevel: params.role_level,\n                vip: params.role_vip_level\n            }\n        }));\n    }\n    getDeviceEnv(params) {\n        Log.commonS('android壳获取设备信息开始');\n        const { callback } = params;\n        this.getDeviceCall = callback;\n        this.callApp(appCode.GET_DEVICE_INFO, JSON.stringify({\n            callName: 'callH5.getDeviceEnvBack'\n        }));\n    }\n    getDeviceEnvBack(e) {\n        Log.commonS('andorid壳获取设备信息完成', e);\n        this.getDeviceCall && this.getDeviceCall(e);\n    }\n    /** 登出 */\n    logout() {\n        Log.commonS('android壳登出开始');\n        this.callApp(appCode.LOGOUT, JSON.stringify({\n            callName: 'callH5.logoutBack'\n        }));\n    }\n    ;\n    /** 切换账号 */\n    switchAccount(params) {\n        Log.commonS('android壳切换账号开始');\n        this.callApp(appCode.LOGOUT, JSON.stringify({\n            callName: 'callH5.switchAccountBack'\n        }));\n    }\n    switchAccountBack(params) {\n        Log.commonS('android壳切换账号完成，h5实现刷新');\n        window.location.reload();\n    }\n    logoutBack(params) {\n        Log.commonS('android壳登出完成，h5实现刷新');\n        window.location.reload();\n    }\n    //暴露游戏壳调用方法\n    getSpaceFunction() {\n        return {\n            init: this.init.bind(this),\n            login: this.login.bind(this),\n            pay: this.pay.bind(this),\n            logout: this.logout.bind(this),\n            switchAccount: this.switchAccount.bind(this),\n            getDeviceEnv: this.getDeviceEnv.bind(this),\n            onEventLog: this.onEventLog.bind(this),\n        };\n    }\n}\n","import { Work } from '@/work/android';\nexport class Device {\n    static getInstance() {\n        if (!Device.instance)\n            Device.instance = new Device();\n        return this.instance;\n    }\n    init() {\n        return new Promise((resolve, reject) => {\n            (new Work).insideInit(resolve, reject);\n        });\n    }\n}\n","import { Launch } from \"@/launch/launch\";\nimport { Log } from \"@/utils/log\";\nlet launch = new Launch();\nclass CPLASDK {\n    static init(initParams) {\n        const { callback, game_version, } = initParams;\n        Log.commonS('游戏调用sdk初始化开始。');\n        launch.externalInit({\n            cpSpace: this,\n            callback,\n            game_version,\n        });\n    }\n}\nwindow.CPLASDK = CPLASDK;\n","import { Log } from \"@/utils/log\";\nimport { Device as DeviceH5 } from '@/devices/h5';\nimport { Device as DeviceAndroid } from '@/devices/android';\nimport { Device as DeviceIos } from '@/devices/ios';\nimport { errorHandlerCP } from \"@/utils/errorHandler\";\nimport { CP_CODE } from \"@/type/code\";\n/** 启动 */\nexport class Launch {\n    constructor() {\n        /** 内部初始化状态\n         * true 初始化完成\n         * false 初始化中\n        */\n        this.insideInitState = false;\n        /** 外部初始化状态\n         * true 已进行\n         * false 未进行\n         */\n        this.externalInitState = false;\n        Log.timeStart('sdk_init_inside');\n        Log.commonS('sdk内部初始化开始。');\n        this.init();\n    }\n    /** 内部初始化 */\n    init() {\n        let initPromise;\n        if (process.env.SDK_shell == 'h5') {\n            initPromise = this.initH5();\n        }\n        else if (process.env.SDK_shell == 'android') {\n            initPromise = this.initAndroid();\n        }\n        else if (process.env.SDK_shell == 'ios') {\n            initPromise = this.initIos();\n        }\n        initPromise.then(({ cpSpace }) => {\n            this.judgeExternalInitState(cpSpace);\n            Log.commonS('sdk内部初始化结束。');\n            Log.timeEnd('sdk_init_inside');\n        }).catch(() => {\n            errorHandlerCP(CP_CODE.INSIDE_INIT_ERROR);\n        });\n    }\n    initIos() {\n        if (process.env.SDK_shell == 'ios') {\n            Log.commonS('ios初始化开始。');\n            return new Promise((revlose) => {\n                DeviceIos.getInstance().init().then((params) => {\n                    Log.commonS('ios初始化成功。');\n                    revlose(params);\n                }).catch(() => {\n                    errorHandlerCP(CP_CODE.INSIDE_IOS_INIT_ERROR);\n                });\n            });\n        }\n    }\n    initAndroid() {\n        if (process.env.SDK_shell == 'android') {\n            Log.commonS('android初始化开始。');\n            return new Promise((revlose) => {\n                DeviceAndroid.getInstance().init().then((params) => {\n                    Log.commonS('android初始化成功。');\n                    revlose(params);\n                }).catch(() => {\n                    errorHandlerCP(CP_CODE.INSIDE_ANDROID_INIT_ERROR);\n                });\n            });\n        }\n    }\n    initH5() {\n        //拉取h5配置\n        if (process.env.SDK_shell == 'h5') {\n            Log.commonS('h5初始化开始。');\n            return new Promise((revlose) => {\n                DeviceH5.getInstance().init().then((params) => {\n                    Log.commonS('h5初始化成功。');\n                    revlose(params);\n                }).catch(() => {\n                    errorHandlerCP(CP_CODE.INSIDE_H5_INIT_ERROR);\n                });\n            });\n        }\n    }\n    /** 外部初始化 */\n    externalInit(insideInitParams) {\n        const { cpSpace, } = insideInitParams;\n        //判断内部初始化状态\n        //初始化参数插入\n        //激活日志上报\n        if (this.insideInitState) {\n            Log.commonS('game-cp 内部初始化已完成');\n            Object.assign(cpSpace, this.insideInitResult.cpSpace);\n            //执行初始化\n            this.insideInitResult.cpSpace.init(insideInitParams);\n        }\n        else {\n            Log.commonS('game-cp 内部初始化未完成');\n            this.externalInitState = true;\n            this.externalInitParams = insideInitParams;\n            this.cpSpace = cpSpace;\n        }\n    }\n    /**  */\n    /** 判断外部初始化状态 */\n    judgeExternalInitState(cpSpace) {\n        if (this.externalInitState) {\n            Log.commonS('cp-game 外部初始化已执行');\n            Object.assign(this.cpSpace, cpSpace);\n            cpSpace.init(this.externalInitParams);\n        }\n        else {\n            Log.commonS('cp-game 等待外部初始化开始');\n            this.insideInitState = true;\n            this.insideInitResult = {\n                cpSpace\n            };\n        }\n    }\n}\n"],"names":["ENV","getNowMicroseconds","start","performance","timing","navigationStart","timeOrigin","now","GetUrlParams","constructor","this","urlParams","analysis","static","instance","parsedData","jsonData","split","map","res","data","analysisGet","location","search","slice","length","get","key","getAll","getIsAndroid","Boolean","getInstance","getIsIos","getIsApp","getPubisherId","getPubisherCode","getGameId","getZoneId","getTunnelId","args","master","console","log","error","warn","logName","logTimeState","hasOwnProperty","logTime","CP_CODE","code","msg","errorHandlerCP","status","Object","assign","appCode","Work","store","initCall","loginCall","getDeviceCall","window","callH5","initBack","bind","loginBack","getDeviceEnvBack","switchAccountBack","logoutBack","callApp","_fn","arg","ss","item","Function","insideInit","resolve","reject","cpSpace","getSpaceFunction","init","params","callback","INIT","JSON","stringify","callName","e","parse","isSuc","zoneid","tunnelid","gameid","pubid","zoneId","tunnelId","gameId","pubId","login","LOGIN","cpsdkToken","token","onEventLog","eventCode","eventData","SUBMIT_GAME_DATA","pay","PAY","productId","product_id","productName","product_name","productDesc","product_desc","price","order_amount","productPrice","orderID","cpsdk_order_id","serverID","server_id","serverName","server_name","roleID","role_id","roleName","role_name","extension","buyNum","product_num","roleLevel","role_level","vip","role_vip_level","getDeviceEnv","GET_DEVICE_INFO","logout","LOGOUT","switchAccount","reload","Device","Promise","launch","insideInitState","externalInitState","initPromise","initAndroid","then","judgeExternalInitState","catch","initIos","revlose","initH5","externalInit","insideInitParams","insideInitResult","externalInitParams","CPLASDK","initParams","game_version"],"sourceRoot":""}